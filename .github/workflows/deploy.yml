name: Deploy

on:
  push:
    tags:
      - 'web-v*'
      - 'api-v*'
      - 'mobile-v*'
      - 'contracts-v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      project:
        description: 'Project to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - web
          - api
          - mobile
          - contracts

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.22'
  PNPM_VERSION: '9'

jobs:
  # Detect which project to deploy based on tag or manual input
  detect-project:
    runs-on: ubuntu-latest
    outputs:
      project: ${{ steps.detect.outputs.project }}
      version: ${{ steps.detect.outputs.version }}
      environment: ${{ steps.detect.outputs.environment }}
    steps:
      - name: Detect project and version
        id: detect
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "project=${{ github.event.inputs.project }}" >> $GITHUB_OUTPUT
            echo "version=manual" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            # Extract project and version from tag
            TAG_NAME="${{ github.ref_name }}"
            PROJECT=$(echo $TAG_NAME | cut -d'-' -f1)
            VERSION=$(echo $TAG_NAME | cut -d'-' -f2)
            echo "project=$PROJECT" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          fi

  # Deploy Web Application
  deploy-web:
    needs: detect-project
    if: needs.detect-project.outputs.project == 'web' || needs.detect-project.outputs.project == 'all'
    runs-on: ubuntu-latest
    environment: ${{ needs.detect-project.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build web application
        run: pnpm --filter web build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.API_URL }}
          NEXT_PUBLIC_ENVIRONMENT: ${{ needs.detect-project.outputs.environment }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Create deployment summary
        run: |
          echo "## 🌐 Web Application Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.detect-project.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.detect-project.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY

  # Deploy API
  deploy-api:
    needs: detect-project
    if: needs.detect-project.outputs.project == 'api' || needs.detect-project.outputs.project == 'all'
    runs-on: ubuntu-latest
    environment: ${{ needs.detect-project.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build API
        run: |
          cd apps/api
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

      - name: Build Docker image
        run: |
          docker build -t danaverse-api:${{ needs.detect-project.outputs.version }} apps/api/

      - name: Deploy to AWS ECS
        run: |
          echo "Deploying API to AWS ECS..."
          # Add your AWS ECS deployment commands here
          # aws ecs update-service --cluster danaverse-cluster --service api-service --force-new-deployment

      - name: Create deployment summary
        run: |
          echo "## 🚀 API Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.detect-project.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.detect-project.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY

  # Deploy Mobile (Build and upload to stores)
  deploy-mobile:
    needs: detect-project
    if: needs.detect-project.outputs.project == 'mobile' || needs.detect-project.outputs.project == 'all'
    runs-on: ubuntu-latest
    environment: ${{ needs.detect-project.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build Android
        run: |
          cd apps/mobile
          eas build --platform android --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Build iOS
        run: |
          cd apps/mobile
          eas build --platform ios --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Submit to stores
        if: needs.detect-project.outputs.environment == 'production'
        run: |
          cd apps/mobile
          eas submit --platform all --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Create deployment summary
        run: |
          echo "## 📱 Mobile Application Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.detect-project.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.detect-project.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY

  # Deploy Contracts
  deploy-contracts:
    needs: detect-project
    if: needs.detect-project.outputs.project == 'contracts' || needs.detect-project.outputs.project == 'all'
    runs-on: ubuntu-latest
    environment: ${{ needs.detect-project.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy contracts
        run: |
          cd contracts
          # Deploy to testnet for staging, mainnet for production
          if [ "${{ needs.detect-project.outputs.environment }}" = "staging" ]; then
            forge script script/Deploy.s.sol --rpc-url ${{ secrets.TESTNET_RPC_URL }} --private-key ${{ secrets.DEPLOYER_PRIVATE_KEY }} --broadcast
          else
            forge script script/Deploy.s.sol --rpc-url ${{ secrets.MAINNET_RPC_URL }} --private-key ${{ secrets.DEPLOYER_PRIVATE_KEY }} --broadcast
          fi

      - name: Verify contracts
        run: |
          cd contracts
          forge verify-contract --chain-id ${{ secrets.CHAIN_ID }} --constructor-args $(cast abi-encode "constructor()") ${{ secrets.CONTRACT_ADDRESS }} src/Crowdfunding.sol

      - name: Create deployment summary
        run: |
          echo "## 📜 Smart Contracts Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.detect-project.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.detect-project.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY

  # Final deployment summary
  deployment-summary:
    needs:
      [detect-project, deploy-web, deploy-api, deploy-mobile, deploy-contracts]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🎉 Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Deployment Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ needs.detect-project.outputs.project }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.detect-project.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.detect-project.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Component Status:" >> $GITHUB_STEP_SUMMARY
          echo "- **Web**: ${{ needs.deploy-web.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API**: ${{ needs.deploy-api.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Mobile**: ${{ needs.deploy-mobile.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Contracts**: ${{ needs.deploy-contracts.result }}" >> $GITHUB_STEP_SUMMARY
